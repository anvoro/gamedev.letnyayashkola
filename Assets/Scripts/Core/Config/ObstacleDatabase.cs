using System;
using System.Collections.Generic;
using Game;
using UnityEngine;
using Object = UnityEngine.Object;

#if UNITY_EDITOR
using System.IO;
using UnityEditor;
#endif

namespace Core.Config
{
	[CreateAssetMenu]
	public class ObstacleDatabase : ScriptableObject
	{
		[Serializable]
		public struct DataItem
		{
			public MovableObstacle Prefab;
			public Texture2D Texture;
		}

		[SerializeField]
		private DataItem[] _items;

		public IReadOnlyList<DataItem> Items => this._items;

#if UNITY_EDITOR
		private void OnValidate()
		{
			for (int i = 0; i < this._items.Length; i++)
			{
				if (this._items[i].Texture != null)
				{
					continue;
				}
				
				MovableObstacle prefab = this._items[i].Prefab;
				if (prefab == null)
				{
					continue;
				}
				
				Texture2D texture = GenerateTransparentThumbnail(prefab.gameObject);
				texture = (Texture2D)SaveAsAsset(texture, i);
				if (texture == null)
				{
					continue;
				}
				
				this._items[i].Texture = texture;
			}
		}

		// ReSharper disable once SuggestBaseTypeForParameter
		private static Texture2D GenerateTransparentThumbnail(GameObject prefab)
		{
			Texture2D thumbnailTexture = AssetPreview.GetAssetPreview(prefab);

			int instanceId = prefab.GetInstanceID();
			int tries = 1000;
			while (AssetPreview.IsLoadingAssetPreview(instanceId) && tries > 0)
			{
				tries--;
			}

			if (thumbnailTexture != null)
			{
				Texture2D transparentTexture = new(thumbnailTexture.width, thumbnailTexture.height,
					TextureFormat.RGBA32, false);

				Color[] pixels = thumbnailTexture.GetPixels();
				Color backgroundColor = pixels[0];
				for (int i = 0; i < pixels.Length; i++)
				{
					if (pixels[i] == backgroundColor)
					{
						pixels[i].a = 0;
					}
				}

				transparentTexture.SetPixels(pixels);
				transparentTexture.Apply();

				return transparentTexture;
			}

			Debug.LogWarning($"Could not generate thumbnail for the given prefab: '{prefab.name}'");
			return null;
		}
		
		private const string PREVIEW_FILE_NAME = "AssetPreview";
		private const string PREVIEW_FILE_FOLDER = "AutoGenerated";
		private static Object SaveAsAsset(Object asset, int index)
		{
			const string folder = "Assets/" + PREVIEW_FILE_FOLDER;
			
			string fileNamePrefix = PREVIEW_FILE_NAME + index;
			string fileName = fileNamePrefix + ".asset";
			string completePath = folder + '/' + fileName;
			
			asset.name = folder + '/' + fileNamePrefix;
			
			if (Directory.Exists(folder) == false)
			{
				Directory.CreateDirectory(folder);
			}
			
			AssetDatabase.DeleteAsset(completePath);
			AssetDatabase.CreateAsset(asset, completePath);
			
			Object previewAsset = AssetDatabase.LoadAssetAtPath(completePath, typeof(Object));
			
			return EditorUtility.InstanceIDToObject (previewAsset.GetInstanceID ());
		}
#endif
	}
}